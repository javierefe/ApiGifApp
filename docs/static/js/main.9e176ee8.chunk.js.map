{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","intputValue","setintputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","imagenes","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAENC,mBAAS,IAFH,mBAErCC,EAFqC,KAExBC,EAFwB,KAgC5C,OAEI,sBAAMC,SA3BW,SAACC,GAElBA,EAAEC,iBAGCJ,EAAYK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAqBO,OACvCN,EAAe,MAoBnB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlCc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCXnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAfO,kBAiBZA,GAjBY,4CAAH,sDCEPS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCDDS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAfDC,qBAAU,WACN1B,EAAQC,GACN0B,MAAK,SAAAhB,GAIFc,EAAS,CACLjB,KAAOG,EACPY,SAAU,SAKpB,CAACtB,IAEIuB,EDfwBI,CAAa3B,GAAhCa,EALuB,EAK5BN,KAAae,EALe,EAKfA,QAYpB,OACI,qCACI,6BAAKtB,IAGHsB,GAAW,mBAAIJ,UAAU,wCAAd,qBAEb,qBAAKA,UAAU,YAAf,SAKQL,EAAOJ,KAAI,SAAAmB,GAAQ,OACf,cAAC,EAAD,eAGQA,GAFGA,EAASjB,aE/B/BkB,EAAe,WAAM,MAIM3C,mBAAS,CAAC,cAJhB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAmB9B,OACI,qCACI,wCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAKA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MChCnC+B,IAASC,OAGP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.9e176ee8.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n// POR LO GENERAL SE ENVIA PROPS\r\n// PERO SE HACE LA DESESTRUCTURACION {}\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [intputValue, setintputValue] = useState(''); // si no ponemos '' se marcara warning como undefines\r\n\r\n    const handleInputChange = (e) => {\r\n        setintputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        // evita los refrescos de la pagina\r\n        e.preventDefault();\r\n\r\n        // es una validacion para vacios y ademas borra el inputValue\r\n        if(intputValue.trim().length > 2){\r\n            setCategories(cats => [intputValue, ...cats]);\r\n            setintputValue('');\r\n        }\r\n    }\r\n\r\n    // AÃ‘ADIR CON BOTON\r\n    // const handleAdd = (e) => {\r\n    //     // setCategories([...categories, 'HunterXHunter']);\r\n    //     // AL INCICIO\r\n    //     // setCategories(['HunterXHunter',...categories ]);\r\n    //     // otra forma\r\n    //     e.preventDefault();\r\n    //     if(intputValue.trim().length > 2){\r\n    //         setCategories(cats => [...cats, intputValue]);\r\n    //         setintputValue('');\r\n    //     }\r\n\r\n    //     // setcategories(categories.concat('Sony'));\r\n    // }\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={ intputValue }\r\n                onChange={handleInputChange}\r\n            />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n        </form>\r\n       \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n\r\n    // encodeURI() reemplazara los espacios vacios por %20\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2hvXk2v8sfRYdbMhUWuhF0y0aIr3jQ2O`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // ? comprueba si todas las imagenes tienen url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    \r\n    return gifs;\r\n}\r\n// getGifs();","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={url} alt={title}/>\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, {useState, useEffect} from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import {getGifs} from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // podemos renombrar en la desestructuracion : data:images\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    // console.log(loading)\r\n    \r\n\r\n    // solo se ejecuta getGifs cuando el componente es renderizado\r\n    // por primera vez\r\n    // useEffect(() => {\r\n    //     getGifs( category )\r\n    //         .then(img => setImages(img) )\r\n    // }, [category]) // si la cateogria cambia vuelve a ejecutar el use effetc\r\n\r\n   \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {/* si el primero es true evalua el segundo atributo */}\r\n            { loading && <p  className=\"card animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    // sin llaves es return implicito\r\n                    // con parentesis retorna una objeto\r\n                    images.map(imagenes => (\r\n                        <GifGridItem\r\n                            key = {imagenes.id}\r\n                            // imagenes = {imagenes}\r\n                            {...imagenes} // para mandar las propiedades de las imagenes como una propiedad independiente  \r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // los efectos no pueden ser async\r\n   useEffect(() => {\r\n       getGifs(category)\r\n        .then(img => {\r\n        \r\n            \r\n                \r\n            setState({\r\n                data : img,\r\n                loading : false\r\n            });\r\n\r\n            \r\n        })\r\n   }, [category]) // solo se evalua este efecto cuando la categoria cambia\r\n\r\n    return state;\r\n}\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n// import PropTypes from 'prop-types'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = (e) => {\r\n    //     console.log(e);\r\n    // }\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories, 'HunterXHunter']);\r\n    //     // AL INCICIO\r\n    //     // setCategories(['HunterXHunter',...categories ]);\r\n    //     // otra forma\r\n    //     // setCategories(cat => [...cat, 'HunterXHunter']);\r\n\r\n    //     // setcategories(categories.concat('Sony'));\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>ApiGif</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            {/* <button onClick={(e) => {handleAdd(e)}>Agregar</button> */}\r\n            {/* si es lo mismo parametro se puede hacer esto... */}\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} \r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  \n  // <GifExpertApp />,\n  <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}